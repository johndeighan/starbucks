// Generated by CoffeeScript 2.5.1
  // StarbucksStores.coffee
import {
  writable,
  readable,
  get
} from 'svelte/store';

import {
  undef,
  error,
  localStore
} from './coffee_utils.js';

// ---------------------------------------------------------------------------
export var WritableStore = class WritableStore {
  constructor(value = undef) {
    this.store = writable(value);
  }

  subscribe(callback) {
    return this.store.subscribe(callback);
  }

  set(value) {
    return this.store.set(value);
  }

  update(func) {
    return this.store.update(func);
  }

};

// ---------------------------------------------------------------------------
export var LocalStorageStore = class LocalStorageStore extends WritableStore {
  constructor(masterKey1, defValue = undef) {
    var value;
    super(defValue);
    this.masterKey = masterKey1;
    value = localStore(this.masterKey);
    if (value != null) {
      this.set(value);
    }
  }

  // --- I'm assuming that when update() is called,
  //     set() will also be called
  set(value) {
    if (value == null) {
      error("LocalStorageStore.set(): cannont set to undef");
    }
    super.set(value);
    return localStore(this.masterKey, value);
  }

  update(func) {
    super.update(func);
    return localStore(this.masterKey, get(this.store));
  }

};

// ---------------------------------------------------------------------------
export var PropStore = class PropStore extends LocalStorageStore {
  constructor(masterKey) {
    super(masterKey, {});
  }

  setProp(name, value) {
    if (name == null) {
      error("PropStore.setProp(): empty key");
    }
    return this.update(function(hPrefs) {
      hPrefs[name] = value;
      return hPrefs;
    });
  }

};

// ---------------------------------------------------------------------------
export var ReadableStore = class ReadableStore {
  constructor() {
    this.store = readable(null, function(set) {
      this.setter = set; // store the setter function
      this.start(); // call your start() method
      return () => {
        return this.stop(); // return function capable of stopping
      };
    });
  }

  subscribe(callback) {
    return this.store.subscribe(callback);
  }

  start() {}

  stop() {}

};

// ---------------------------------------------------------------------------
export var MousePosStore = class MousePosStore extends ReadableStore {
  start() {
    // --- We need to store this handler for use in stop() later
    this.mouseMoveHandler = function(e) {
      return this.setter({
        x: e.clientX,
        y: e.clientY
      });
    };
    return document.body.addEventListener('mousemove', this.mouseMoveHandler);
  }

  stop() {
    return document.body.removeEventListener('mousemove', this.mouseMoveHandler);
  }

};
