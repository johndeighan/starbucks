// Generated by CoffeeScript 2.7.0
  // commands.coffee
var lCommands,
  indexOf = [].indexOf;

import {
  assert,
  error,
  undef,
  pass,
  words
} from '@jdeighan/coffee-utils';

import {
  log
} from '@jdeighan/coffee-utils/log';

import {
  debug
} from '@jdeighan/coffee-utils/debug';

import {
  SvelteOutput
} from '@jdeighan/svelte-output';

lCommands = words('if elsif else for await then catch log error');

// ---------------------------------------------------------------------------
export var isCmd = function(cmd) {
  return indexOf.call(lCommands, cmd) >= 0;
};

// ---------------------------------------------------------------------------
export var foundCmd = function(cmd, argstr, level, oOutput) {
  var _, eachstr, expr, index, key, lMatches, varname;
  assert(oOutput instanceof SvelteOutput, "foundCmd(): oOutput not instance of SvelteOutput");
  switch (cmd) {
    case '#if':
      oOutput.putCmdWithExpr('{#if ', argstr, '}', level);
      return;
    case '#elsif':
      oOutput.putCmdWithExpr('{:else if ', argstr, '}', level);
      return;
    case '#else':
      if (argstr) {
        error("#else cannot have arguments");
      }
      oOutput.putLine("\{\:else\}", level);
      return;
    case '#for':
      lMatches = argstr.match(/^([A-Za-z_][A-Za-z0-9_]*)(?:,([A-Za-z_][A-Za-z0-9_]*))?\s+in\s+(.*?)(?:\s*\(\s*key\s*=\s*(.*)\s*\))?$/); // variable name
      // index variable name
      // '(key = '
      // the key
      // ')'
      // key is optional
      if (lMatches != null) {
        [_, varname, index, expr, key] = lMatches;
        if (index) {
          eachstr = `\#each ${expr} as ${varname},${index}`;
        } else {
          eachstr = `\#each ${expr} as ${varname}`;
        }
        if (key) {
          eachstr += ` (${key})`;
        }
      } else {
        error("Invalid #for command");
      }
      oOutput.putLine(`\{${eachstr}\}`, level);
      return;
    case '#await':
      oOutput.putLine(`\{\#await ${argstr}\}`, level);
      return;
    case '#then':
      oOutput.putLine(`\{\:then ${argstr}\}`, level);
      return;
    case '#catch':
      oOutput.putLine(`\{\:catch ${argstr}\}`, level);
      return;
    case '#log':
      log(argstr);
      return;
    case '#error':
      oOutput.putLine(`<div class=\"error\">${argstr}</div>`);
      return;
    default:
      error(`foundCmd(): Unknown command: '${cmd}'`);
  }
};

// ---------------------------------------------------------------------------
export var endCmd = function(cmd, level, oOutput) {
  assert(cmd != null, "endCmd(): empty cmd");
  switch (cmd) {
    case '#if':
      oOutput.putLine("\{\/if\}", level);
      break;
    case '#for':
      oOutput.putLine("\{\/each\}", level);
      break;
    case '#await':
      oOutput.putLine("\{\/await\}", level);
  }
};
